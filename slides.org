#+TITLE: Coq for Haskell programmers
#+DATE: 04.10.2018
#+AUTHOR: Anton Trunov
#+EMAIL: @Anton_A_Trunov
#+OPTIONS: num:nil toc:nil timestamp:nil
#+OPTIONS: reveal_title_slide:"<h1>%t</h1><h2>%a</h2><h3>Madrid&nbsp;Haskell&nbsp;Users&nbsp;Group</h3><h4>%d</h4>"
# #+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.6.0/
#+REVEAL_TRANS: none
# none | fade | slide | convex | concave | zoom
#+REVEAL_THEME: beige
# /League/Sky/Beige/Simple/Serif/Blood/Night/Moon/Solarized
#+REVEAL_EXTRA_CSS: ./modifications.css
# #+REVEAL_PLUGINS: (highlight)

* What is Coq ?
Coq is a formal proof management system.
It provides
- a language to write mathematical definitions,
- executable algorithms,
- theorems (specifications),
- environment for interactive development of machine-checked proofs.
The project started at INRIA a long time ago.
* Broader context
The land of formal methods includes
- Specification languages
- Interactive theorem provers
- SAT/SMT solvers
- Model checking
- Program Logics
- ...
* Related systems
- Lean prover (similar to Coq)
- Agda (no impredicativity)
- Idris (similar to Agda)
- F* (used to verify crypto code in Firefox)
- Isabelle/HOL (very different from Coq, seL4)
* What do people use Coq for?
Formalization of mathematics:
- Four color theorem,
- Feit-Thompson theorem
- Homotopy type theory.
Education: it's a proof _assistant_.
* 
:PROPERTIES:
:reveal_background: images/deepspec.png
:reveal_background_size: 1600px
:reveal_background_trans: slide
:END:
* More examples
- Coq-generated crypto code in Chrome
- [[https://github.com/mit-pdos/fscq][FSCQ]]: a file system written and verified in Coq
- Cryptocurrencies (e.g. Tezos, Zilliqa)
* 
:PROPERTIES:
:reveal_background: images/scilla-coq.jpg
:reveal_background_size: 1600px
:reveal_background_trans: slide
:END:
* Coq, its ecosystem and community
- open source (https://github.com/coq/coq)
- written in OCaml
- has a standard library
- lots of packages available on OPAM
- community-driven projects: https://github.com/coq-community/
* Coq repo stats (LoC)
|--------------+-------+--------|
| Language     | files |   code |
|--------------+-------+--------|
| OCaml        |   949 | 203230 |
| Coq          |  1970 | 196057 |
| TeX          |    26 |   5270 |
| Markdown     |    22 |   3362 |
| Bourne Shell |   107 |   2839 |
| ...          |       |        |
* Mathcomp stats (LoC)
|----------------+-------+--------|
| Language       | files |   code |
|----------------+-------+--------|
| HTML        :) |   377 | 299260 |
| Coq            |    92 |  83726 |
| JavaScript     |    13 |  34363 |
| CSS            |     6 |   1199 |
| ...            |       |        |
* 
:PROPERTIES:
:reveal_background: images/fscq-bug.png
:reveal_background_size: 1600px
:reveal_background_trans: slide
:END:
* Proofs _and_ Tests
- =@vj_chidambaram=: Even verified file systems have unverified parts :)
- FSCQ had a buggy optimization in the Haskell-C bindings
- CompCert is known to also have bugs in the non-verified parts
- QuickChick shows an amazing applicability of randomized testing in the context of theorem proving
* FSCQ stats (LoC)
|----------+-------+-------|
| Language | files |  code |
|----------+-------+-------|
| Coq      |    98 | 81049 |
| C        |    36 |  4132 |
| Haskell  |     8 |  1091 |
| OCaml    |    10 |   687 |
| Python   |     9 |   643 |
| ...      |       |       |
* CompCert C Compiler stats (LoC)
|--------------+-------+--------|
| Language     | files |   code |
|--------------+-------+--------|
| Coq          |   223 | 146226 |
| C            |   223 |  65053 |
| OCaml        |   147 |  28381 |
| C/C++ Header |    86 |   7834 |
| Assembly     |    59 |   1542 |
| ...          |       |        |
* What is Coq based on?
_*Calculus of Inductive Constructions*_

Just some keywords:
- Dependent types (expressivity!)
- Curry-Howard Correspondence
* Curry-Howard Correspondence
- Main idea:
  + propositions are special case of types
  + a proof is a program of the required type
- One language to rule 'em all
- Proof checking = Type checking!
- Proving = Programming
* Proving _is_ programming
- High confendence in your code
- It is as strong as strong your specs are (trust!)
- It can be extremely hard to come up with a spec (think of browsers)
- IMHO: the best kind of programming
* Dependent types
array(n)
# credit goes to Aleks Nanevski for suggesting the array example
* Let's step back a bit: Peano numbers
#+BEGIN_SRC coq
Inductive nat :=
| O : nat
| S : nat -> nat.
#+END_SRC
* Dependent types: even numbers
#+BEGIN_SRC coq
Inductive even :=
| ev0 : even 0
| evSS : even n -> even (S (S n)).
#+END_SRC
* Dependent types: even numbers
#+BEGIN_SRC coq
Inductive even :=
| ev0 : even 0
| evSS : even n -> even (S (S n)).

(evSS (evSS (evSS ev0))) : even 6.
#+END_SRC
* Simple types
| Type          | Haskell  | Proposition       |
|---------------+----------+-------------------|
| Empty type    |          | Contradiction (⊥) |
| Unit type     | =()=     | Trivial prop. (⊤) |
| Product type  | =(a,b)=  | Conjunction (∧)   |
| Sum type      | =Either= | Disjunction (∨)   |
| Function type | =a -> b= | Implication (⊃)   |
* Simple proof
#+BEGIN_SRC coq
(fun '(a, b) => (b, a)) : (A * B) -> (B * A)
#+END_SRC
* Dependent types
How do we represent ∀ and ∃?

We need dependent types!
| Type                   | Proposition                |
|------------------------+----------------------------|
| Dependent funtion type | Universal quantifier (∀)   |
| Dependent sum type     | Existential quantifier (∃) |
* Dependent function type
∀ x : A, B x
- Generalizes the arrow type
- Programs of type =∀ x : A, B x= are functions,
  whose return *type* depends on the input *value*.
* Dependent sum type
∃ x : A, B x
#+BEGIN_SRC coq
Inductive Exists (A : Type) (P : A -> Prop) :=
| mkExists : forall x : A, P x -> Exists A P.
#+END_SRC
* Coq as Programming Language
- Functional
- Dependently-typed
- *Total* language
- Extraction
* Extraction
- OCaml
- Haskell
- Scheme
- C via https://github.com/akr/codegen
* 
:PROPERTIES:
:reveal_background: images/xmonad.png
:reveal_background_size: 1600px
:reveal_background_trans: slide
:END:
* Extraction: xmonad
- [[http://www.staff.science.uu.nl/~swier004/publications/2012-haskell.pdf][xmonad in Coq (Experience Report)]] by Wouter Swierstra (2012)
- it's possible!
- the report shows there is lots of room for improvement
* Haskell and Coq
- [[https://github.com/antalsz/hs-to-coq][hs-to-coq]] - Haskell to Coq converter
- [[https://deepspec.org/entry/Project/Haskell+CoreSpec][Deepspec: Haskell+CoreSpec]]
- [[https://github.com/jwiegley/coq-haskell][coq-haskell]] - A library for formalizing Haskell types and functions in Coq 
* [[https://github.com/antalsz/hs-to-coq][hs-to-coq]] - Haskell to Coq converter
- part of the CoreSpec component of the DeepSpec project
- has been applied to verification Haskell’s =containers= library against specs derived from
  + type class laws;
  + library’s test suite;
  + interfaces from Coq’s stdlib.
- challenge: partiality
* [[https://deepspec.org/entry/Project/Haskell+CoreSpec][Deepspec: Haskell+CoreSpec]]
- a new formal calculus describing the GHC core language
- proven type soundness
- compatible with extensions of Haskell with dependent types
* [[https://github.com/jwiegley/coq-haskell][coq-haskell]] library
- designed for Haskell users who are either
  + using Coq to build code intended for extraction to Haskell
  + or who wish to prototype/prove their algorithms in Coq
- provides a collection of definitions and notations to make Gallina more familiar to Haskellers
* [[https://github.com/mattam82/Coq-Equations][Coq-Equations]] plugin
#+BEGIN_SRC coq
Equations fold {α β} (f : α -> β -> β) (v : β) (xs : list α) : β :=

fold f v []            := v ;
fold f v (cons h tail) := f h (fold f v tail).
#+END_SRC
* Recommended reading
Books:
- [[https://softwarefoundations.cis.upenn.edu/current/index.html][The Software Foundations series]] by B.C. Pierce et al.
- [[http://ilyasergey.net/pnp/][Programs and Proofs]] by Ilya Sergey
Blog posts and papers:
- [[https://www.joachim-breitner.de/blog/734-Finding_bugs_in_Haskell_code_by_proving_it][Finding bugs in Haskell code by proving it]] by J. Breitner
- [[http://blog.ezyang.com/2014/03/haskell-for-coq-programmers/][Haskell for Coq programmers]] by E.Z. Yang
- [[https://arxiv.org/pdf/1803.06960.pdf][Ready, Set, Verify! Applying hs-to-coq to real-world Haskell code]] - J. Breitner et. al (2018)
* More papers
- [[https://www.cs.purdue.edu/homes/bendy/Fiat/FiatByteString.pdf][Using Coq to Write Fast and Correct Haskell]] by J. Wiegley, B. Delaware (2018)
- [[https://arxiv.org/abs/1711.09286][Total Haskell is Reasonable Coq]] by A. Spector-Zabusky et al. (2018)
- [[https://cs.brynmawr.edu/~rae/papers/2017/dep-haskell-spec/dep-haskell-spec.pdf][A Specification for Dependent Types in Haskell]] by S. Weirich et al. (2017)
* Questions?
* Thank you!
